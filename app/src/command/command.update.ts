import { Logger } from '@nestjs/common';
import { Action, Command, Ctx, On, Update } from 'nestjs-telegraf';
import { TelegrafContext } from 'src/interface/telegraf-context.interface';
import { Utm } from 'src/user/entity/user.entity';
import { UserService } from 'src/user/user.service';
import { sellersHubApi } from 'src/utils/sellershub-api.utils';
import * as passwordGenerator from 'generate-password';

const admins: {
  username: string;
  telegram_id: number;
}[] = [
  {
    username: '@nnaastyyaa',
    telegram_id: 5135704563,
  },
  {
    username: '@koiEugene',
    telegram_id: 54452505,
  },
  {
    username: '@polina_nb',
    telegram_id: 5819723114,
  },
  {
    username: '@polinaibich',
    telegram_id: 397918359,
  },
];

@Update()
export class CommandUpdate {
  private readonly logger = new Logger(CommandUpdate.name);
  constructor(private readonly userService: UserService) {}

  async validateUser(ctx: TelegrafContext) {
    const user = await this.userService.findOne(String(ctx.from.id));
    if (user) {
      return user;
    } else {
      return await this.userService.create({
        telegram_id: String(ctx.from.id),
        first_name: ctx.from.first_name ? ctx.from.first_name : null,
        last_name: ctx.from.last_name ? ctx.from.last_name : null,
        username: ctx.from.username ? ctx.from.username : null,
        utm: !!ctx.update.message.text.match(Utm.fulfillment_assistant_lending)
          ? Utm.fulfillment_assistant_lending
          : !!ctx.update.message.text.match(Utm.registration_on_course)
          ? Utm.registration_on_course
          : !!ctx.update.message.text.match(Utm.fast_registration)
          ? Utm.fast_registration
          : null,
      });
    }
  }

  @Command('start')
  async start(@Ctx() ctx: TelegrafContext) {
    ctx.session.order = null;
    await this.validateUser(ctx);
    try {
      if (!!ctx.update.message.text.match(Utm.fast_registration)) {
        await ctx.reply(
          '–î–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç".',
          {
            reply_markup: {
              resize_keyboard: true,
              one_time_keyboard: true,
              force_reply: true,
              keyboard: [
                [
                  {
                    text: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                    request_contact: true,
                  },
                ],
              ],
            },
          },
        );
      }
      if (!!ctx.update.message.text.match(Utm.registration_on_course)) {
        const { username, first_name, last_name, id: telegram_id } = ctx.from;
        // prettier-ignore
        const message = `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫—É—Ä—Å –ø–æ –§–§\n\nTelegram_id:${telegram_id}\n–ò–º—è: ${first_name ? first_name : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–§–∞–º–∏–ª–∏—è: ${last_name ? last_name : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username ? `https://t.me/${username}` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date().toLocaleDateString('ru-RU', {
          timeZone: 'Europe/Moscow',
        })}\n–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date().toLocaleTimeString('ru-RU', {
          timeZone: 'Europe/Moscow',
        })}`;
        await ctx.replyWithPhoto(
          `https://sellershub.ru/api/uploads/Privetstvie_ec4726b7d5.png?updated_at=2023-05-24T10:06:24.090Z`,
          {
            caption: `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!üéâ\n\n–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å –æ –∑–∞–ø—É—Å–∫–µ –∫—É—Ä—Å–∞, —á—Ç–æ–±—ã –≤—ã —É—Å–ø–µ–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Å–∞–º–æ–π –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ‚ö°Ô∏è.`,
          },
        );

        for await (const admin of admins) {
          await ctx.telegram.sendMessage(admin.telegram_id, message);
        }
      }
      if (
        !ctx.update.message.text.match(Utm.fast_registration) &&
        !ctx.update.message.text.match(Utm.registration_on_course)
      ) {
        await ctx.replyWithPhoto(
          'https://sellershub.ru/api/uploads/Privetstvie_32246ded80.png?updated_at=2023-04-29T13:41:34.693Z',
          {
            caption: `${
              ctx.from.first_name ? ctx.from.first_name : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'
            }, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ Fullfilment Assist Bot!üéâ\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞.\n\–ù–∞–∂–º–∏—Ç–µ "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É" –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –±—ã—Å—Ç—Ä–æ.`,
            disable_notification: true,
            reply_markup: {
              one_time_keyboard: true,
              force_reply: true,
              resize_keyboard: true,
              keyboard: [
                [
                  {
                    text: '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É',
                  },
                ],
              ],
            },
          },
        );
      }
    } catch (e) {
      this.logger.error('Error from start', e.message);
    }
  }

  @On('contact')
  async contactHandler(@Ctx() ctx: TelegrafContext) {
    try {
      const { phone_number, user_id } = ctx.update.message.contact;
      const password = passwordGenerator.generate({
        length: 16,
        symbols: false,
        numbers: true,
        uppercase: true,
        lowercase: true,
      });
      const user = await sellersHubApi.registrationByPhoneHumber({
        phone_number:
          phone_number[0] === '+' ? phone_number.slice(1) : phone_number,
        password,
        registered_from_bot: true,
        telegram_id: user_id,
        username: ctx.from.username ? ctx.from.username : null,
      });
      if (user === 'used') {
        await ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
      }
      //@ts-ignore
      if (user.jwt) {
        await ctx.reply(
          `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç:\n–õ–æ–≥–∏–Ω: ${
            phone_number[0] === '+' ? phone_number.slice(1) : phone_number
          }\n–ü–∞—Ä–æ–ª—å: ${password}\n <a href="https://sellershub.ru">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>`,
          {
            parse_mode: 'HTML',
          },
        );
      }
    } catch (e) {
      this.logger.error(`Error from  ${this.contactHandler.name}`, e.message);
    }
  }

  @On('message')
  async messageHandler(@Ctx() ctx: TelegrafContext) {
    try {
      if (ctx.update.message.text.match('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É')) {
        await ctx.deleteMessage();
        await ctx.reply(
          `–û—Ç–≤–µ—Ç—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –Ω–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n\n1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞, —Ç—Ä–µ–±—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É. –ï–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã.\n2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ.\n3. –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞? –û—Ç–∫—É–¥–∞?\n4. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–æ–≤–∞—Ä–æ–º. –ö–∞–∫–∞—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ø–∞–∫–æ–≤–∫–∞.\n5. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã: FBO –∏–ª–∏ FBS?\n6. –ö—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä?\n7. –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –æ—Ç –≤–∞—Å: –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª–∏¬†–±—ã¬†—É—Ç–æ—á–Ω–∏—Ç—å.\n8. –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.\n`,
        );
      }
      if (!ctx.update.message.text.match('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É')) {
        ctx.session.order = ctx.update.message.text;
        await ctx.reply(ctx.update.message.text, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'send-order' }],
            ],
          },
        });
      }
    } catch (e) {
      this.logger.error('Error from messageHandler', e.message);
    }
  }

  @Action('send-order')
  async sendOrder(@Ctx() ctx: TelegrafContext) {
    try {
      await ctx.deleteMessage();
      if (ctx.session.order && ctx.session.order.length) {
        for await (const admin of admins) {
          await ctx.telegram.sendMessage(
            admin.telegram_id,
            `–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: ${ctx.session.order}\n–û—Ç –∫–æ–≥–æ: ${
              ctx.from.username ? ctx.from.username : ctx.from.id
            }`,
          );
        }
        await ctx.reply(
          '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.–í —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.',
        );
        await this.userService.update(String(ctx.from.id), ctx.session.order);
      }
    } catch (e) {
      this.logger.error('Error from sendOrder', e.message);
    }
  }
}
