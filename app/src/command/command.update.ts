import { Logger } from '@nestjs/common';
import { Action, Command, Ctx, On, Update } from 'nestjs-telegraf';
import { TelegrafContext } from 'src/interface/telegraf-context.interface';
import { Utm } from 'src/user/entity/user.entity';
import { UserService } from 'src/user/user.service';

@Update()
export class CommandUpdate {
  private readonly logger = new Logger(CommandUpdate.name);
  constructor(private readonly userService: UserService) {}

  async validateUser(ctx: TelegrafContext) {
    const user = await this.userService.findOne(String(ctx.from.id));
    if (user) {
      return user;
    } else {
      return await this.userService.create({
        telegram_id: String(ctx.from.id),
        first_name: ctx.from.first_name ? ctx.from.first_name : null,
        last_name: ctx.from.last_name ? ctx.from.last_name : null,
        username: ctx.from.username ? ctx.from.username : null,
        utm: !!ctx.update.message.text.match(Utm.fulfillment_assistant_lending)
          ? Utm.fulfillment_assistant_lending
          : null,
      });
    }
  }

  @Command('start')
  async start(@Ctx() ctx: TelegrafContext) {
    ctx.session.order = null;
    await this.validateUser(ctx);
    try {
      await ctx.replyWithPhoto(
        'https://sellershub.ru/api/uploads/Privetstvie_32246ded80.png?updated_at=2023-04-29T13:41:34.693Z',
        {
          caption: `${
            ctx.from.first_name ? ctx.from.first_name : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'
          }, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ Fullfilment Assist Bot!üéâ\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞.\n\–ù–∞–∂–º–∏—Ç–µ "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É" –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –±—ã—Å—Ç—Ä–æ.`,
          disable_notification: true,
          reply_markup: {
            one_time_keyboard: true,
            force_reply: true,
            resize_keyboard: true,
            keyboard: [
              [
                {
                  text: '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É',
                },
              ],
            ],
          },
        },
      );
    } catch (e) {
      this.logger.error('Error from start', e.message);
    }
  }

  @On('message')
  async messageHandler(@Ctx() ctx: TelegrafContext) {
    try {
      if (ctx.update.message.text.match('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É')) {
        await ctx.deleteMessage(ctx.update.message.message_id - 1);

        await ctx.deleteMessage();
        await ctx.reply(`
        –û—Ç–≤–µ—Ç—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –Ω–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n\n–°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç—ã: (–§–ë–û , –§–ë–°)\n–ù–∞ —Å–∫–ª–∞–¥—ã –∫–∞–∫–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É?\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞?\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ ?\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤?\n–ì–∞–±–∞—Ä–∏—Ç—ã —Ç–æ–≤–∞—Ä–∞ –¥*—à*–≤?\n–í–∏–¥ —É–ø–∞–∫–æ–≤–∫–∏ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º?\n–î–æ–ø.—É—Å–ª—É–≥–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—Ä–∞–∫, –¥–æ–ø.–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.`);
      }
      if (!ctx.update.message.text.match('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É')) {
        ctx.session.order = ctx.update.message.text;
        await ctx.reply(ctx.update.message.text, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'send-order' }],
            ],
          },
        });
      }
    } catch (e) {
      this.logger.error('Error from messageHandler', e.message);
    }
  }

  @Action('send-order')
  async sendOrder(@Ctx() ctx: TelegrafContext) {
    try {
      await ctx.deleteMessage();
      if (ctx.session.order && ctx.session.order.length) {
        await ctx.telegram.sendMessage(
          54452505,
          `–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: ${ctx.session.order}\n–û—Ç –∫–æ–≥–æ: ${
            ctx.from.username ? ctx.from.username : ctx.from.id
          }`,
        );
        await ctx.reply(
          '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.–í —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.',
        );
        await this.userService.update(String(ctx.from.id), ctx.session.order);
      }
    } catch (e) {
      this.logger.error('Error from sendOrder', e.message);
    }
  }
}
